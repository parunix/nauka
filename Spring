Spring

Beans Scopes
	domyslnie jest singletonem
		wszystkie spring containers are using only one instance
		its cached in memory
		all request will return reference to the same bean
		np.:
			Coach theCoach = context.getBean("tennisCoach", Coach.class);
			Coach alphaCoach = context.getBean("tennisCoach", Coach.class);
			using the same object
	Za pomoca adnotacji mozna zdefiniowac jaki jest zakres
	@Scope("singleton");
	
	Jest tez scope prototype, nowy obiekt dla kazdego requestu
	
	@Comoponent
	@Scope("prototype")
	
	Mozna dodac bean dodac kod do inicjalizacji albo przy niszczeniu obiektu
		Inicjalizacja:
			@Component
			public class ...
				@PostConstruct
				metoda
		Niszczenie
				@PreDestroy
				metoda
	
Konfiguracja Springa przy uzyciu klas Java
	nie trzeba uzywac plikow XML

XML :: kazdy bean musi byc skonfigurowany xml

XML :: component scan, komponent skan, wyszczegolniamy tylko pakiet jaki ma byc przeskanowany

JavaConfiguration
	tylko java, tutaj wyszczegolniamy jakie pakiety maja byc brane pod uwage przy skanowaniu, nie uzywamy xml'a
	
	Tworzenie klasy przy uzyciu adnotacji @Configuration; @ComponentScan opcjonalny, nastepnie czytanie klasy spring z konfiguracja
	Pociagniecie beanu Spring z kontenera
	Wczytujemy klase AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext(KlasaConfig.class);
	Mozemy dodac definicje @Bean ale wtedy bez configurationscan
		wtedy kazdy bean musi zostac zdefiniowany oddzielnie
			kazda nazwa metody jest wlasciwie BeanID
	Wczytywanie plikow, wlasciwosci, property file, dodanie:
		@PropertySource("classpath:sport.properties")	

Spring MVC
	Model View Controller
	
	BROWSER [request] -> Front Controller -> Model -> Controller -> Model -> View Template -> [request] BROWSER
	
	Benefits:
		Reusable UI components,
		menage application tracing, request tracking,
		process forms
		you can use many view layers (not only JSP)
	
	Front controller [DispatcherServlet / dyspozytor servlet]
		delegete request to other object or items
		developer create then only view, model and controller
	Model objects contain data
		data container
	View template is JSP page
	
	Controller is bussines logic
		created code, handles web request
		
	Model
		Store retrive data via backend system
			database, web service, etc
			spring bean as data
			and put data into model
	View
		provide data to the user
		jsp, themeleaf, groovy, velocity, freemarker
		